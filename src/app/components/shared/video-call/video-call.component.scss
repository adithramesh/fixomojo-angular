@use 'sass:color';
@use 'variables' as var;

.video-call-container {
  position: fixed; // Changed to fixed for full viewport
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: #000;
  z-index: 1000;
  display: flex;
  flex-direction: column;
}

.video-streams {
  flex: 1;
  display: grid;
  gap: var.$spacing-sm; 
  padding: var.$spacing-sm;
  height: 100%; 
  &.single-participant {
    grid-template-columns: 1fr;
    .local-stream {
      width: 100%;
      height: 100vh; 
    }
  }
  &.two-participants {
    grid-template-columns: 1fr 1fr;
    @media (max-width: var.$breakpoint-md) {
      grid-template-columns: 1fr;
      grid-template-rows: 1fr 1fr; 
    }
  }
}

.video-stream {
  position: relative;
  background: var.$gray-dark;
  border-radius: var.$border-radius-lg;
  overflow: hidden;
  height: 100%; 
  video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }
  .stream-label {
    position: absolute;
    bottom: var.$spacing-sm;
    left: var.$spacing-sm;
    background: rgba(0, 0, 0, 0.7);
    color: var.$white;
    padding: var.$spacing-xs var.$spacing-sm;
    border-radius: var.$border-radius-sm;
    font-size: var.$font-size-sm;
    font-weight: var.$font-weight-semibold;
  }
  &.local-stream .stream-label {
    background: rgba(111, 66, 193, 0.8);
  }
}

.call-controls {
  display: flex;
  justify-content: center;
  gap: var.$spacing-md;
  padding: var.$spacing-md; // Reduced
  background: rgba(0, 0, 0, 0.8);
  backdrop-filter: blur(10px);
  .control-button {
    width: 56px;
    height: 56px;
    border-radius: 50%;
    border: none;
    color: var.$white;
    font-size: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    &.mute-audio {
      background: var.$gray-dark;
      &.active {
        background: var.$error-red;
      }
    }
    &.toggle-video {
      background: var.$gray-dark;
      &.active {
        background: var.$error-red;
      }
    }
    &.end-call {
      background: var.$error-red;
      &:hover {
        background: color.adjust(var.$error-red, $lightness: -10%);
      }
    }
    &:hover:not(.end-call) {
      background: color.adjust(var.$gray-dark, $lightness: 10%);
    }
  }
}

.incoming-call-modal {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: var.$white;
  padding: var.$spacing-xl;
  border-radius: var.$border-radius-lg;
  box-shadow: var.$box-shadow-md;
  z-index: 1001;
  text-align: center;
  max-width: 400px;
  width: 90%;

  .caller-info {
    margin-bottom: var.$spacing-lg;

    h3 {
      color: var.$text-color;
      margin-bottom: var.$spacing-sm;
      font-family: var.$title-font;
    }

    p {
      color: var.$gray-text;
      font-size: var.$font-size-sm;
    }
  }

  .call-actions {
    display: flex;
    gap: var.$spacing-md;

    .accept-call {
      flex: 1;
      background: var.$success-green;
      color: var.$white;
      padding: var.$spacing-sm var.$spacing-md;
      border: none;
      border-radius: var.$border-radius-md;
      cursor: pointer;
      font-weight: var.$font-weight-semibold;

      &:hover {
        background: color.adjust(var.$success-green, $lightness: -10%);
      }
    }

    .reject-call {
      flex: 1;
      background: var.$error-red;
      color: var.$white;
      padding: var.$spacing-sm var.$spacing-md;
      border: none;
      border-radius: var.$border-radius-md;
      cursor: pointer;
      font-weight: var.$font-weight-semibold;

      &:hover {
        background: color.adjust(var.$error-red, $lightness: -10%);
      }
    }
  }
}

.call-status {
  position: absolute;
  top: var.$spacing-md;
  left: var.$spacing-md;
  background: rgba(0, 0, 0, 0.7);
  color: var.$white;
  padding: var.$spacing-xs var.$spacing-sm;
  border-radius: var.$border-radius-sm;
  font-size: var.$font-size-sm;
  &.connecting {
    background: rgba(111, 66, 193, 0.8);
  }
  &.in-call {
    background: rgba(var.$success-green, 0.8);
  }
}


.video-streams {
  flex: 1;
  display: grid;
  gap: var.$spacing-md;
  padding: var.$spacing-md;

  // force rows to have height
  grid-auto-rows: 1fr;
  min-height: 60vh;

  &.single-participant {
    grid-template-columns: 1fr;

    .local-stream {
      width: 100%;
      height: 100%;
      min-height: 50vh; 
    }
  }

  &.two-participants {
    grid-template-columns: 1fr 1fr;

    @media (max-width: var.$breakpoint-md) {
      grid-template-columns: 1fr;
      grid-template-rows: 1fr 1fr; 
    }
  }
}

.video-stream {
  position: relative;
  background: var.$gray-dark;
  border-radius: var.$border-radius-lg;
  overflow: hidden;
  min-height: 40vh; 

  video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }
}
